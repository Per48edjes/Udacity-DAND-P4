df.long <- df %>%
select_if(is.numeric) %>%
gather()
df.long %>%
ggplot(aes(value)) + facet_wrap(~ key, scales = "free") +
geom_histogram(bins = 50)
# Summary statistics of each variable
summary(df)
# Custom breaks function
base_breaks <- function(n = 3){
function(x) {
axisTicks(log10(range(x, na.rm = TRUE)), log = TRUE, n = n)
}
}
# Generate plots
df.long %>%
filter(!key %in% c("quality", "pH", "density")) %>%
ggplot(aes(value)) + facet_wrap(~ key, scales = "free") +
geom_histogram(bins = 40) +
scale_x_continuous(trans = log_trans(), breaks = base_breaks())
# Data transformation
df.outs <- df %>%
mutate(chlorides_outlier = abs(scale(chlorides)) >= 2,
alcohol_outlier = abs(scale(alcohol)) >= 2,
residual.sugar_outlier = abs(scale(residual.sugar)) >= 2,
free.sulfur.dioxide_outlier = abs(scale(free.sulfur.dioxide)) >= 2,
citric.acid_outlier = abs(scale(citric.acid)) >= 2)
# Fix matrix-as-column issue
df.outs$chlorides_outlier <-
sapply(df.outs$chlorides_outlier,
function(x) {return(as.numeric(x))})
df.outs$alcohol_outlier <-
sapply(df.outs$alcohol_outlier,
function(x) {return(as.numeric(x))})
df.outs$residual.sugar_outlier <-
sapply(df.outs$residual.sugar_outlier,
function(x) {return(as.numeric(x))})
df.outs$free.sulfur.dioxide_outlier <-
sapply(df.outs$free.sulfur.dioxide_outlier,
function(x) {return(as.numeric(x))})
df.outs$citric.acid_outlier <-
sapply(df.outs$citric.acid_outlier,
function(x) {return(as.numeric(x))})
# Get rid of observation number
df.outs <- df.outs[,2:length(colnames(df.outs))]
# Histogram comparison
## Chloride
chlorides.no_outs.hist <- ggplot(subset(df.outs, chlorides_outlier == 0)) +
geom_histogram(bins = 40, aes(x = chlorides)) +
scale_x_continuous(trans = log_trans(), breaks = base_breaks()) +
labs(x= "log(chlorides), no outliers")
chlorides.hist <- ggplot(df.outs) +
geom_histogram(bins = 40, aes(x = chlorides))
## Alcohol
alcohol.no_outs.hist <- ggplot(subset(df.outs, alcohol_outlier == 0)) +
geom_histogram(bins = 40, aes(x = alcohol)) +
scale_x_continuous(trans = log_trans(), breaks = base_breaks()) +
labs(x= "log(alcohol), no outliers")
alcohol.hist <- ggplot(df.outs) +
geom_histogram(bins = 40, aes(x = alcohol))
## Residual sugar
residual.sugar.no_outs.hist <-
ggplot(subset(df.outs, residual.sugar_outlier == 0)) +
geom_histogram(bins = 40, aes(x = residual.sugar)) +
scale_x_continuous(trans = log_trans(), breaks = base_breaks()) +
labs(x= "log(residual.sugar), no outliers")
residual.sugar.hist <- ggplot(df.outs) +
geom_histogram(bins = 40, aes(x = residual.sugar))
## Free sulfur dioxide
free.sulfur.dioxide.no_outs.hist <-
ggplot(subset(df.outs, free.sulfur.dioxide_outlier == 0)) +
geom_histogram(bins = 40, aes(x = free.sulfur.dioxide)) +
scale_x_continuous(trans = log_trans(), breaks = base_breaks()) +
labs(x= "log(free.sulfur.dioxide), no outliers")
free.sulfur.dioxide.hist <- ggplot(df.outs) +
geom_histogram(bins = 40, aes(x = free.sulfur.dioxide))
## Citric acid
citric.acid.no_outs.hist <- ggplot(subset(df.outs, citric.acid_outlier == 0)) +
geom_histogram(bins = 40, aes(x = citric.acid)) +
scale_x_continuous(trans = log_trans(), breaks = base_breaks()) +
labs(x= "log(citric.acid), no outliers")
citric.acid.hist <- ggplot(df.outs) +
geom_histogram(bins = 40, aes(x = citric.acid))
grid.arrange(chlorides.hist, chlorides.no_outs.hist,
alcohol.hist, alcohol.no_outs.hist,
residual.sugar.hist, residual.sugar.no_outs.hist,
free.sulfur.dioxide.hist, free.sulfur.dioxide.no_outs.hist,
citric.acid.hist, citric.acid.no_outs.hist,
ncol = 2)
# Make 'quality.3' a categorical variable from 'quality'
df$rquality.3 <- cut(df$quality, c(0,5,7,10), right = FALSE,
ordered_result = TRUE, labels = c("Bad", "Medium", "Good"))
# Make 'rquality.2' a categorical variable from 'quality'
df$rquality.2 <- cut(df$quality, c(0,6,10), right = FALSE,
ordered_result = TRUE, labels = c("Bad", "Good"))
ggplot(df, aes(x = rquality.3)) + geom_bar(stat = "count")
df %>%
group_by(rquality.3) %>%
count()
# Structure data accordingly
df.long2.c3 <- df %>%
gather(key = "key", value = "value",-"rquality.3", -"quality",
-"rquality.2") %>%
filter(key != "X")
# Adjust column types
df.long2.c3 <- transform(df.long2.c3, value = as.numeric(value),
quality = as.ordered(quality),
rquality.3 = as.ordered(rquality.3))
# Make plot of proportions of relative quality
df.long2.c3 %>%
ggplot(aes(x = value, color = rquality.3)) +
facet_wrap(~ key, scales = "free") +
geom_freqpoly(aes(y=..count../sum(..count..)), bins = 15) +
scale_y_continuous("Proportion of Red Wines", labels = scales::percent)
box_plots1 <- df.long2.c3 %>%
ggplot(aes(y = value, x = rquality.3, color = rquality.3)) +
facet_wrap(~ key, scales = "free") +
geom_point(size = 0.5,
position = position_jitter(width = 0.5), alpha = 0.05) +
geom_boxplot(fill="white",
position = position_dodge(width = 0.9))
box_plots1
# Summary statistics
df.long2.c3 %>%
group_by(rquality.3, key) %>%
summarise(mean = mean(value), median = median(value),
range = max(value) - min(value), std.dev = sd(value))
vars_list <- list(list(df$residual.sugar, "Residual Sugar"),
list(df$total.sulfur.dioxide, "Total Sulfure Dioxide"),
list(df$chlorides, "Chlorides"))
for (v in vars_list) {
plot <- df %>%
ggplot(aes(y = v[[1]], x = factor(quality), color = rquality.3)) +
geom_point(size = 0.7,
position = position_jitterdodge(jitter.width = 0.8),
alpha = 0.1) +
geom_boxplot(aes(group = rquality.3), fill="white",
position = position_dodge(width=0.9)) +
labs(y = v[[2]])
print(plot)
}
# Create bad, medium, good tables
bad_df <- subset(df.long2.c3, rquality.3 == "Bad")
medium_df <- subset(df.long2.c3, rquality.3 == "Medium")
good_df <- subset(df.long2.c3, rquality.3 == "Good")
bad_df_disp <- bad_df %>%
group_by(key) %>%
summarize(std.dev_bad = sd(value), range_bad = max(value)-min(value))
medium_df_disp <- medium_df %>%
group_by(key) %>%
summarize(std.dev_medium = sd(value), range_medium = max(value)-min(value))
good_df_disp <- good_df %>%
group_by(key) %>%
summarize(std.dev_good = sd(value), range_good = max(value)-min(value))
# Consolidate and transform tables into one dispersion table
disp.table <- left_join(left_join(bad_df_disp, medium_df_disp, by = "key"),
good_df_disp, by = "key")
disp.table.long <- disp.table %>%
gather(-key, key = "measure", value = "value")
## Function to assign quality categories each row
quality.grader <- function(x) {
if (str_detect(x, "bad")) {
return("Bad")
}
else if (str_detect(x, "medium")) {
return("Medium")
}
else {
return("Good")
}
}
# Break out combined measure_quality column into two
disp.table.long$quality <- sapply(disp.table.long$measure, quality.grader)
disp.table.long$measure <- sapply(disp.table.long$measure,
function(x) {
if (str_detect(x, "std.dev"))
{return("SD")}
else {return("Range")}})
# Arrange data in quality order
disp.table.long$quality <- ordered(disp.table.long$quality,
c("Bad", "Medium", "Good"))
# Plot dispersions
sd_plots <- disp.table.long %>%
filter(measure == "SD") %>%
arrange(quality) %>%
ggplot(aes(x = quality, y = value)) +
facet_wrap(~ key, scales = 'free') +
geom_bar(aes(group = measure), stat = 'identity') +
ggtitle("Standard Deviations")
range_plots <- disp.table.long %>%
filter(measure == "Range") %>%
arrange(quality) %>%
ggplot(aes(x = quality, y = value)) +
facet_wrap(~ key, scales = 'free') +
geom_bar(aes(group = measure), stat = 'identity') +
ggtitle("Ranges")
sd_plots
range_plots
ggplot(df, aes(x = rquality.2)) + geom_bar(stat = "count")
df %>%
group_by(rquality.2) %>%
count()
# Structure data accordingly
df.long2.c2 <- df %>%
gather(key = "key", value = "value",-"rquality.2", -"quality",
-"rquality.3") %>%
filter(key != "X")
# Adjust column types
df.long2.c2 <- transform(df.long2.c2, value = as.numeric(value),
quality = as.ordered(quality),
rquality.2 = as.ordered(rquality.2))
# Make plot of proportions of relative quality
df.long2.c2 %>%
ggplot(aes(x = value, color = rquality.2)) +
facet_wrap(~ key, scales = "free") +
geom_freqpoly(aes(y=..count../sum(..count..)), bins = 15) +
scale_y_continuous("Proportion of Red Wines", labels = scales::percent)
# Create boxplots
box_plots2 <- df.long2.c2 %>%
ggplot(aes(y = value, x = rquality.2, color = rquality.2)) +
facet_wrap(~ key, scales = "free") +
geom_point(position = position_jitterdodge(dodge.width = 1), alpha = 0.1) +
geom_boxplot(fill="white",
position = position_dodge(width=0.9))
box_plots2
# Subset only numeric variables
df.numvars_only <- df[, !names(df) %in% c("rquality.2", "rquality.3", "X")]
# Make custom scatter plot function
lower_fn <- function(data, mapping, ...) {
ggplot(data = data, mapping = mapping) +
geom_point(color = 'blue', alpha= 0.3, size = 0.01) +
geom_smooth(color = 'black', method = 'lm', size= 1, se = F)
}
# Formatting properties via theme
t <- theme(
axis.text = element_text(size = 1),
axis.title = element_text(size = 1),
legend.background = element_rect(fill = "white"),
panel.grid.major = element_line(colour = NA),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "grey95"))
# Create scatterplot matrix
df.numvars_only %>%
ggpairs(alpha = 0.1, axisLabels = "show",
upper = list(continuous = wrap("cor", size = 2, alignPercent = 1)),
lower = list(continuous = lower_fn)) +
t
# Create a correlation heatmap
df.numvars_only %>%
ggcorr()
qbivs <- ggplot(df.long2.c3, aes(x = value, y = quality)) +
geom_point(alpha = 0.2, position = position_jitter()) +
geom_smooth(aes(group = 1), se = FALSE, method = "lm") +
facet_wrap( ~ key, scales = "free")
qbivs
# Dataframe containing variable of interest
df.alcohol <- df[, c("alcohol", "rquality.3", "quality")]
# Dataframe removing conditional (i.e., by quality) outliers
df.alcohol.no_ols <- df.alcohol %>%
group_by(quality) %>%
filter(!(abs(alcohol - median(alcohol)) > 2*sd(alcohol)))
# Initial plots
p.alcohol0 <- ggplot(df.alcohol, aes(x = alcohol, y = quality,
color = rquality.3)) +
geom_point(position = position_jitter(), alpha = 0.2) +
ggtitle("all data") +
geom_smooth(aes(group = 1), method = "loess", se = FALSE)
p.alcohol1 <- ggplot(df.alcohol.no_ols, aes(x = alcohol, y = quality,
color = rquality.3)) +
geom_point(position = position_jitter(), alpha = 0.2) +
ggtitle("no conditional outliers") +
geom_smooth(aes(group = 1), method = "loess", se = FALSE)
grid.arrange(p.alcohol0, p.alcohol1, nrow = 1)
# Comparison of correlation when controlling for conditional outliers
## No outliers
cor.test(df.alcohol.no_ols$quality, df.alcohol.no_ols$alcohol,
method = "pearson")
## All data
cor.test(df.alcohol$quality, df.alcohol$alcohol, method = "pearson")
# Dataframe containing variable of interest
df.chlorides <- df[, c("chlorides", "rquality.3", "quality")]
# Dataframe removing conditional (i.e., by quality) outliers
df.chlorides.no_ols <- df.chlorides %>%
group_by(quality) %>%
filter(!(abs(chlorides - median(chlorides)) > 2*sd(chlorides)))
# Initial plots
p.chlorides0 <- ggplot(df.chlorides, aes(x = chlorides, y = quality,
color = rquality.3)) +
geom_point(position = position_jitter(), alpha = 0.2) +
ggtitle("all data") +
geom_smooth(aes(group = 1), method = "loess", se = FALSE) +
scale_x_log10()
p.chlorides1 <- ggplot(df.chlorides.no_ols, aes(x = chlorides, y = quality,
color = rquality.3)) +
geom_point(position = position_jitter(), alpha = 0.2) +
ggtitle("no conditional outliers") +
geom_smooth(aes(group = 1), method = "loess", se = FALSE) +
scale_x_log10()
grid.arrange(p.chlorides0, p.chlorides1, nrow = 1)
# Dataframe containing variable of interest
df.sulphates <- df[, c("sulphates", "rquality.3", "quality")]
# Dataframe removing conditional (i.e., by quality) outliers
df.sulphates.no_ols <- df.sulphates %>%
group_by(quality) %>%
filter(!(abs(sulphates - median(sulphates)) > 2*sd(sulphates)))
# Initial plots
p.sulphates0 <- ggplot(df.sulphates, aes(x = sulphates, y = quality,
color = rquality.3)) +
geom_point(position = position_jitter(), alpha = 0.2) +
ggtitle("all data") +
geom_smooth(aes(group = 1), method = "loess", se = FALSE) +
scale_x_log10()
p.sulphates1 <- ggplot(df.sulphates.no_ols, aes(x = sulphates, y = quality,
color = rquality.3)) +
geom_point(position = position_jitter(), alpha = 0.2) +
ggtitle("no conditional outliers") +
geom_smooth(aes(group = 1), method = "loess", se = FALSE) +
scale_x_log10()
grid.arrange(p.sulphates0, p.sulphates1, nrow = 1)
# Comparison of correlation when controlling for conditional outliers
## No outliers
cor.test(df.sulphates.no_ols$quality, df.sulphates.no_ols$sulphates,
method = "pearson")
## All data
cor.test(df.sulphates$quality, df.sulphates$sulphates, method = "pearson")
# Dataframe containing variable of interest
df.residual.sugar <- df[, c("residual.sugar", "rquality.3", "quality")]
# Dataframe removing conditional (i.e., by quality) outliers
df.residual.sugar.no_ols <- df.residual.sugar %>%
group_by(quality) %>%
filter(!(abs(residual.sugar - median(residual.sugar)) > 2*sd(residual.sugar)))
# Initial plots
p.residual.sugar0 <- ggplot(df.residual.sugar,
aes(x = residual.sugar, y = quality,
color = rquality.3)) +
geom_point(position = position_jitter(), alpha = 0.2) +
ggtitle("all data") +
geom_smooth(aes(group = 1), method = "loess", se = FALSE)
p.residual.sugar1 <- ggplot(df.residual.sugar.no_ols,
aes(x = residual.sugar, y = quality,
color = rquality.3)) +
geom_point(position = position_jitter(), alpha = 0.2) +
ggtitle("no conditional outliers") +
geom_smooth(aes(group = 1), method = "loess", se = FALSE)
grid.arrange(p.residual.sugar0, p.residual.sugar1, nrow = 1)
# Dataframe containing variable of interest
df.total.sulfur.dioxide <- df[, c("total.sulfur.dioxide", "rquality.3",
"quality")]
# Dataframe removing conditional (i.e., by quality) outliers
df.total.sulfur.dioxide.no_ols <- df.total.sulfur.dioxide %>%
group_by(quality) %>%
filter(!(abs(total.sulfur.dioxide - median(total.sulfur.dioxide)) >
2*sd(total.sulfur.dioxide)))
# Initial plots
p.total.sulfur.dioxide0 <- ggplot(df.total.sulfur.dioxide,
aes(x = total.sulfur.dioxide, y = quality,
color = rquality.3)) +
geom_point(position = position_jitter(), alpha = 0.2) +
ggtitle("all data") +
geom_smooth(aes(group = 1), method = "loess", se = FALSE)
p.total.sulfur.dioxide1 <- ggplot(df.total.sulfur.dioxide.no_ols,
aes(x = total.sulfur.dioxide, y = quality,
color = rquality.3)) +
geom_point(position = position_jitter(), alpha = 0.2) +
ggtitle("no conditional outliers") +
geom_smooth(aes(group = 1), method = "loess", se = FALSE)
grid.arrange(p.total.sulfur.dioxide0, p.total.sulfur.dioxide1, nrow = 1)
ggplot(df.total.sulfur.dioxide.no_ols) +
stat_summary(aes(x = quality, y = total.sulfur.dioxide),
fun.y = median, fun.ymax = max, fun.ymin = min)
# Dataframe containing variable of interest
df.volatile.acidity <- df[, c("volatile.acidity", "rquality.3", "quality")]
# Dataframe removing conditional (i.e., by quality) outliers
df.volatile.acidity.no_ols <- df.volatile.acidity %>%
group_by(quality) %>%
filter(!(abs(volatile.acidity - median(volatile.acidity)) >
2*sd(volatile.acidity)))
# Initial plots
p.volatile.acidity0 <- ggplot(df.volatile.acidity, aes(x = volatile.acidity,
y = quality,
color = rquality.3)) +
geom_point(position = position_jitter(), alpha = 0.2) +
ggtitle("all data") +
geom_smooth(aes(group = 1), method = "loess", se = FALSE)
p.volatile.acidity1 <- ggplot(df.volatile.acidity.no_ols,
aes(x = volatile.acidity, y = quality,
color = rquality.3)) +
geom_point(position = position_jitter(), alpha = 0.2) +
ggtitle("no conditional outliers") +
geom_smooth(aes(group = 1), method = "loess", se = FALSE)
grid.arrange(p.volatile.acidity0, p.volatile.acidity1, nrow = 1)
ggplot(df, aes(x = free.sulfur.dioxide, y = total.sulfur.dioxide,
color = rquality.3)) +
geom_point(position = position_jitter(), alpha = 0.3) +
facet_wrap(~ rquality.3 , scale = "free") +
geom_smooth(method = "lm", se = TRUE)
# Fit the model between total and free sulfur dioxide
d <- df
fit <- lm(data = d, total.sulfur.dioxide ~ free.sulfur.dioxide)
# Plot features of model
par(mfrow = c(2, 2))
plot(fit)
# Correlation of log-transformed total and free sulfure dioxide variables
cor.test(method = "pearson",  df$total.sulfur.dioxide, df$free.sulfur.dioxide)
# Plot: Volatile Acidity vs. Citric Acidity
volatile.base <- ggplot(df, aes(x = citric.acid, y = volatile.acidity,
color = rquality.3)) +
geom_point(position = position_jitter(), alpha = 0.3) +
facet_wrap(~ rquality.3 , scale = "free") +
geom_smooth(method = "lm", se = TRUE)
volatile.base
# Correlation
cor.test(method = "pearson",  df$volatile.acidity, df$citric.acid)
# Plot: Volatile Acidity vs. Fixed Acidity
volatile.fixed <- ggplot(df, aes(x = fixed.acidity, y = volatile.acidity,
color = rquality.3)) +
geom_point(position = position_jitter(), alpha = 0.3) +
facet_wrap(~ rquality.3 , scale = "free") +
geom_smooth(method = "lm", se = TRUE)
volatile.fixed
# Correlation
cor.test(method = "pearson",  df$volatile.acidity, df$citric.acid)
# Plot: Volatile Acidity vs. pH
fixed.pH <- ggplot(df, aes(x = pH, y = volatile.acidity,
color = rquality.3)) +
geom_point(position = position_jitter(), alpha = 0.3) +
facet_wrap(~ rquality.3 , scale = "free") +
geom_smooth(method = "lm", se = TRUE)
fixed.pH
# Correlation
cor.test(method = "pearson",  df$fixed.acidity, df$pH)
model1 <- lm(quality ~ log(alcohol), df)
summary(model1)
ggplot(df, aes(x = log(alcohol), y = quality)) +
geom_point(position = position_jitter(), alpha = 0.2) +
stat_smooth(method = "lm", col = "red")
model1b <- lm(quality ~ log(alcohol), subset(df.outs, alcohol_outlier == 0))
summary(model1b)
ggplot(subset(df.outs, alcohol_outlier == 0), aes(x = alcohol, y = quality)) +
geom_point(position = position_jitter(), alpha = 0.2) +
stat_smooth(method = "lm", col = "red")
# Various compound models
model2 <- update(model1, ~ . + volatile.acidity)
model3 <- update(model2, ~ . + I(log(sulphates)))
model4a <- update(model3, ~ . + fixed.acidity)
model4c <- update(model3, ~ . + pH)
model4b <- update(model3, ~ . + I(log(0.00001 + citric.acid)))
mtable(model1, model2, model3, model4a, model4b, model4c, sdigits = 3)
# Create errors dataframes for each model
errors_df1 <- data.frame(df$quality,
predict(model1, df) - as.numeric(df$quality), 1)
errors_df2 <- data.frame(df$quality,
predict(model2, df) - as.numeric(df$quality), 2)
errors_df3 <- data.frame(df$quality,
predict(model2, df) - as.numeric(df$quality), 3)
# Concatenate all the data into one dataframe
names(errors_df1) <- c("quality", "error", "model")
names(errors_df2) <- c("quality", "error", "model")
names(errors_df3) <- c("quality", "error", "model")
errors_df <- rbind(errors_df1, errors_df2, errors_df3)
errors_df$model <- as.factor(errors_df$model)
errors_df$quality <- factor(errors_df$quality, ordered = TRUE)
error_plot <- ggplot(errors_df, aes(x = quality, y = error, fill = model)) +
geom_boxplot()
error_plot
df.numvars_only %>%
ggcorr(palette = "RdBu", label = TRUE, label_size = 3, size = 1.5) +
ggtitle("Correlation Coefficient Matrix") +
guides(fill = guide_legend(title = "Correlation Coefficient, r"))
sulfur1 <- ggplot(df, aes(x = free.sulfur.dioxide,
y = total.sulfur.dioxide, color = rquality.3)) +
geom_point(position = position_jitter(), alpha = 0.3) +
facet_wrap(~ rquality.3 , scale = "free") +
geom_smooth(method = "lm", se = TRUE) +
scale_y_log10() +
scale_x_log10() +
xlab("Log(Free Sulfur Dioxide)") +
ylab("Log(Total Sulfur Dioxide)") +
labs(color = "Wine Quality")
sulfur2 <- ggplot(df, aes(x = free.sulfur.dioxide,
y = total.sulfur.dioxide, color = rquality.3)) +
geom_point(position = position_jitter(width = 0.2), alpha = 0.3) +
geom_smooth(aes(group = 1), method = "lm", se = TRUE) +
scale_y_log10() +
scale_x_log10() +
xlab("Log(Free Sulfur Dioxide)") +
ylab("Log(Total Sulfur Dioxide)") +
labs(color = "Wine Quality")
grid.arrange(sulfur1, sulfur2,
top = "Related Variables: Free vs. Total Sulfur Dioxide")
# Create errors dataframes for each model
errors_df1 <- data.frame(df$quality,
predict(model1, df) - as.numeric(df$quality), 1)
errors_df2 <- data.frame(df$quality,
predict(model2, df) - as.numeric(df$quality), 2)
errors_df3 <- data.frame(df$quality,
predict(model2, df) - as.numeric(df$quality), 3)
# Concatenate all the data into one dataframe
names(errors_df1) <- c("quality", "error", "model")
names(errors_df2) <- c("quality", "error", "model")
names(errors_df3) <- c("quality", "error", "model")
errors_df <- rbind(errors_df1, errors_df2, errors_df3)
errors_df$model <- as.factor(errors_df$model)
errors_df$quality <- factor(errors_df$quality, ordered = TRUE)
error_plot +
xlab("Wine Quality") +
ylab("Model Residuals") +
labs(fill = "Model") +
ggtitle("Model Comparison: Residuals") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_hline(yintercept = 0) +
scale_fill_brewer(type = "qual")
